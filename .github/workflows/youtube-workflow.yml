name: Update Latest Videos

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *" # Runs every hour

jobs:
  youtube-workflow:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Install dependencies
        run: |
          npm install googleapis

      - name: Create or update pull request
        run: |
          GH_PAT="${{ secrets.GH_PAT }}"
          API_URL="https://api.github.com/repos/${{ github.repository }}/pulls"
          BRANCH_NAME="update-videos"
          PR_TITLE="Update latest videos"

          # Check if a pull request with the same title and branch already exists
          EXISTING_PR=$(curl -s -H "Authorization: Bearer $GH_PAT" -H "Accept: application/vnd.github.v3+json" \
            "${API_URL}?head=${{ github.actor }}:${BRANCH_NAME}" | jq -r '.[0].html_url')

          if [ "$EXISTING_PR" != "null" ]; then
            echo "Closing existing pull request: $EXISTING_PR"
            EXISTING_PR_NUMBER=$(basename "$EXISTING_PR")
            curl -X PATCH -H "Authorization: Bearer $GH_PAT" -H "Accept: application/vnd.github.v3+json" \
              "${API_URL}/${EXISTING_PR_NUMBER}" -d '{"state": "closed"}'
          fi

          # Create a new pull request
          PR_RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            $API_URL \
            -d '{"title": "'"$PR_TITLE"'", "head": "'"$BRANCH_NAME"'", "base": "main", "draft": true, "body": "This pull request was automatically generated to update the latest videos."}')

          PR_URL=$(echo "$PR_RESPONSE" | jq -r '.html_url')

          if [ "$PR_URL" == "null" ]; then
            echo "Failed to create the pull request. Exiting..."
            echo "Response from GitHub API: $PR_RESPONSE"
            exit 1
          fi

          echo "Draft Pull Request URL: $PR_URL"

          # Wait for the pull request to open
          while true; do
            PR_STATE=$(curl -s -H "Authorization: Bearer $GH_PAT" -H "Accept: application/vnd.github.v3+json" "$PR_URL" | jq -r '.state')
            
            if [ "$PR_STATE" == "open" ]; then
              break
            elif [ "$PR_STATE" == "closed" ]; then
              echo "Pull request is closed. Exiting..."
              exit 1
            fi
            
            echo "Pull request state: $PR_STATE"
            sleep 5
          done

          echo "Pull request is open."

          # Automate reviews
          REVIEW_COMMENTS=$(curl -X POST \
            -H "Authorization: Bearer $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"body": "LGTM", "event": "APPROVE"}' \
            "$API_URL/$(basename "$PR_URL")/reviews" \
            | jq -r '.html_url')

          echo "Review Comments: $REVIEW_COMMENTS"

          # Wait for checks to pass
          while true; do
            CHECKS_COUNT=$(curl -s -H "Authorization: Bearer $GH_PAT" -H "Accept: application/vnd.github.v3+json" "$PR_URL/checks" | jq -r '.total_count')
            
            if [ "$CHECKS_COUNT" -eq 0 ]; then
              break
            fi
            
            echo "Checks count: $CHECKS_COUNT"
            sleep 5
          done

          # Merge the pull request using the API
          curl -X PUT \
            -H "Authorization: Bearer $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            "$PR_URL/merge"
